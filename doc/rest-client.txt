*rest-client.txt* For Vim version 8.0. Last change: 2024 Jun 12

==============================================================================
CONTENTS                                                       *rest-client*

    0. Why                                                |rest-client-why|
    1. Requirements                              |rest-client-requirements|
    2. Usage                                            |rest-client-usage|
    3. Commands                                      |rest-client-commands|
    4. Configuration Variables        |rest-client-configuration-variables|
    5. API File Variables                       |rest-client-api-variables|
    6. Authorization                                     |rest-client-auth|
    7. Cookies                                        |rest-client-cookies|
    8. Examples                                      |rest-client-examples|
    9. Form Data                                    |rest-client-form-data|
   10. Acknowledgments                        |rest-client-acknowledgments|

==============================================================================
WHY                                                       *rest-client-why*

Being one of the only vim users on my team, when the company I worked at said
we could no longer use API clients that interacted with the cloud everyone
switched to using VS Code's Rest Client for our team managed API testing
utility. I wanted to be able to use the same API files rather than create my
own so I created this plugin.

==============================================================================
REQUIREMENTS                                     *rest-client-requirements*

All of the actual API calls are done by system calls, currently using `curl`.

To use the JSON pretty print version of output `jq` is used.

No special installs is needed, just have both binaries in your path.

==============================================================================
USAGE                                                 *rest-client-usage*

The plugin is designed to read the current buffer and execute the API call
under the cursor. Output is displayed in a new buffer and optionally cleaned
up with `jq` if the output is JSON. The output includes HTTP headers and
response data.

Optionally a configuration file can be placed near the http file which allows
for environment variables in the URL. They are injected using double curly
braces `{{VAR_NAME}}`.

The http file is a simple format giving the method and URL along with optional
header values and request data. See [rest-client-examples].

==============================================================================
COMMANDS                                           *rest-client-commands*

There are two commands supplied:

  `:RestClientConfig` - Opens the configuration file and dumps all
                      environments and the variables under them.

  `:RestClient [<flags>] [environment]` - Runs the API and opens a new buffer
                                        with results.

  `:RestClientJSON [<flags>] [environment]` - Same command but cleans up output
                                            as JSON

  `:RestClientReRun` - Reruns the last API call made with the last output
                     style selected

Currently supported flags:

  `-h`  - Disables headers in the output

==============================================================================
CONFIGURATION VARIABLES                  *rest-client-configuration-variables*

`g:rest_client_cookie_file` - Location of the cookie file. Default is
                            `cookie.txt` next to the API file opened.

==============================================================================
API FILE VARIABLES                           *rest-client-api-variables*

There are two ways to use variables in the API file.

First local variable are possible by using the `@` symbol.

`@host = http://fo.co/`

The other way is to create a file `http-client.env.json` in the directory next
to the API file. This file is a JSON file with the following format:

```json
{
  "local": {
    "host": "http://fo.co"
  }
}
```

To use the variables in the API file simply wrap them in double curly braces.

```http
###
GET {{host}}/api
```

Prompts can be useful when running an API with user data you'd like to vary.
To add a promopt create a comment line in the API entry with the name and the
text to prompt the user.

```http
###
# @prompt username Enter a username
GET http://fo.co/info?username={{username}}
```

They can also be used in the payload.

```http
###
# @prompt username Enter a username
POST http://fo.co/post-data

{
  "name": "{{username}}"
}
```

==============================================================================
AUTHORIZATION                                          *rest-client-auth*

Currently the only authorization methods with SPECIAL supported are Basic and
Digest. To use either simply add an `Authorization` header to the API File.

Basic Auth supports three entry types:

```http
GET http://fo.co/api
Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=
```

```http
GET http://fo.co/api
Authorization: Basic username:password
```

```http
GET http://fo.co/api
Authorization: Basic username password
```

Digest Auth supports one entry type:

```http
GET http://fo.co/api
Authorization: Digest username password
```

For all other forms, like `Bearer` just create the `Authorization` header and
it will be passed directly to `curl`.

==============================================================================
COOKIES                                          *rest-client-cookies*

Cookies are supported automatically. A text file `cookies.txt` is created
to store them and are automatically retrieved when issuing requests.

==============================================================================
EXAMPLES                                          *rest-client-examples*

The following is an example of a http API file.

```http
# Example API file

###
# An example of GET
GET https://ex.co/api/search?foo=1234

###
# An example with Header fields
# Multiple lines of comments
GET https://ex.co/api/search?foo=1234
Authorization: Basic deadbeef

###
# URL on multiple lines, only supporting query params
GET https://ex.co/api/search
    ?foo=1234
    &bar=5678

###
# A POST example
POST https://ex.co/api/hello
Content-Type: application/json

{
    "name": "World"
}
```

==============================================================================
FORM DATA                                        *rest-client-form-data*


Form data is supported through the Content-Type header. Currently the methods
supported are `multipart/format-data` and `application/x-www-form-urlencoded`.
Form fields as well as files can be sent.

Multipart Form Data:

```http
###
# Sending form fields
POST http://localhost:3000/input
Content-Type: multipart/form-data; boundary=foo

--foo
Content-Disposition: form-data; name="text1"

this is text1
--foo
Content-Disposition: form-data; name="text2"

this is text2
--foo--

###
# Sending a file
POST http://localhost:3000/upload
Content-Type: multipart/form-data; boundary=foo

--foo
Content-Disposition: form-data; name="file"; filename="test.txt"

< ./test.txt
--foo--

```

Url Encoded:

First line of body starts as a normal `key=value` and all subsequent lines
must begin with an `&`.

```http
###
POST http://localhost:3000/data
Content-Type: application/x-www-form-urlencoded

text1=this+is+text1&text2=this+is+text2
&text3=also+text3
```

==============================================================================
ACKNOWLEDGMENTS                            *rest-client-acknowledgments*

This plugin was inspired by the Rest Client extension for VS Code.

https://github.com/Huachao/vscode-restclient

==============================================================================
vim:tw=78:ts=8:noet:ft=help:norl:
